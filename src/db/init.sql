-- 1. Create profiles table
-- 1.1 profiles table extends auth.users
drop table if exists public.profiles cascade;
create table public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  role text check (role in ('admin', 'membership', 'visitor')) not null,
  email text unique not null,
  points integer default 0,             
  full_name text,                       
  birthday date                         
);

-- Enable RLS
alter table public.profiles enable row level security;

-- Policy for INSERT
create policy "Users can insert own profile"
on public.profiles for insert
with check (auth.uid() = id);

-- Policy for UPDATE
create policy "Users can update own profile"
on public.profiles for update
using (auth.uid() = id);

-- Policy for SELECT
create policy "Users can view own profile"
on public.profiles for select
using (auth.uid() = id);

-- 1.2 Function to auto create profile after new user is created
create or replace function public.handle_new_user()
returns trigger
language plpgsql security definer set search_path = public
as $$
begin
  insert into public.profiles (id, email, role, points) 
  values (NEW.id, NEW.email, 'visitor', 0); -- 默认积分 0，角色 visitor
  return NEW;
end;
$$;

-- 1.3 Trigger for new user creation
drop trigger if exists on_auth_user_created on auth.users;

create trigger on_auth_user_created
after insert on auth.users
for each row execute procedure public.handle_new_user();

-- 2. Create item table for CRUD test case 

drop table if exists public.item cascade;

create table public.item (
  id bigint generated by default as identity primary key,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  data jsonb,
  image text
);

insert into public.item (data, image) values
  ('{"name": "Alice", "age": 25, "role": "admin"}', 'https://iqcotzorsugbzmdnlsrc.supabase.co/storage/v1/object/public/bucket-ygf/tmp.png'),
  ('{"name": "Bob", "age": 30, "role": "member"}', 'https://iqcotzorsugbzmdnlsrc.supabase.co/storage/v1/object/public/bucket-ygf/tmp.png'),
  ('{"name": "Charlie", "age": 28, "role": "visitor"}', 'https://iqcotzorsugbzmdnlsrc.supabase.co/storage/v1/object/public/bucket-ygf/tmp.png');


-- 3. Create membership table
drop table if exists public.membership cascade;

create table public.membership (
  id bigint generated by default as identity primary key,
  full_name text not null,
  email text unique not null,
  membership_type text check (membership_type in (
    'visitor', 'institutional', 'corporate', 'student'
  )) not null default 'visitor', 
  verified boolean default false,
  registered_at timestamp with time zone default timezone('utc'::text, now()) not null, 
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,    
  details jsonb not null                             
);

-- Insert example data (keep same key)
insert into public.membership (full_name, email, membership_type, verified, details) values
  (
    'Alice Zhang',
    'alice@example.com',
    'visitor',
    false,
    '{"country": "China", "affiliation": "Peking University", "field": "AI", "notes": "IEEE member"}'
  ),
  (
    'Bob Smith',
    'bob@example.com',
    'student',
    false,
    '{"country": "USA", "affiliation": "MIT", "field": "Computer Science", "notes": "PhD Candidate"}'
  ),
  (
    'Global Tech Ltd.',
    'contact@globaltech.com',
    'corporate',
    false,
    '{"country": "Australia", "affiliation": "Global Tech Ltd.", "field": "Technology", "notes": "5000 employees"}'
  );
